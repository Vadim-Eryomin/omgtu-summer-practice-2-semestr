#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

//
// Вычисление определенного интеграла
//
using System.Threading;
using System.Threading.Tasks;
class DefiniteIntegral
{
    //
    // a, b - границы отрезка, на котором происходит вычисление опредленного интеграла
    // function - функция, для которой вычисляется определнный интеграл
    // step - размер одного шага разбиения
    // threadsNumber - число потоков, которые используются для вычислений
    //
    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsnumber)
    {
        double result = 0.0;
        result += (function.Invoke(a) + function.Invoke(b)) / 2;
        Task[] tasks = new Task[threadsnumber];

        double interval = (b - a) / threadsnumber;
        for (int th = 0; th < threadsnumber; th++) {
            int k = th;
            tasks[k] = Task.Factory.StartNew(() => {
                double subResult = 0.0;

                double start = a + interval * k;
                double end = a + interval * (k + 1);
                int steps = (int) Math.Round((end - start) / step);

                for (int i = k == 0 ? 1 : 0; i < (k == threadsnumber - 1 ? steps + 1 : steps); i++) {
                    subResult += function.Invoke(start + i * step);
                }

                result += subResult;
            });
        }

        Task.WaitAll(tasks);
        return result * step;
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"

using Xunit;

var X = (double x) => x;
var SIN = (double x) => Math.Sin(x);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, X, 1e-4, 2), 1e-4);
Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, SIN, 1e-5, 8), 1e-4);
Assert.Equal(50, DefiniteIntegral.Solve(0, 10, X, 1e-6, 8), 1e-5);

#!markdown

Заметим, что погрешность для формулы трапеций выглядит как  ![формула погрешности](image.png). В таком случае, зная, что 
(sin (x))'' = -sin (x), а максимальное значение -sin(x) = 1, то формула превращается в E=16.6h<sup>2</sup>, где h - шаг

Очевидно, что при уже при h=1e-2: E=0.00166>0.0001, а при h=1e-3: E=0.0000166<0.0001, но на практике накапливается достаточно большая ошибка при работе с вещественными числами

#!csharp

Assert.Equal(0, DefiniteIntegral.Solve(-100, 100, SIN, 1e-3, 1), 1e-4);

#!markdown

При h=1e-4 таких проблем не возникает => это и есть искомое значение шага

#!csharp

Assert.Equal(0, DefiniteIntegral.Solve(-100, 100, SIN, 1e-4, 1), 1e-4);

#!csharp

//
// Вычисление определенного интеграла
// Реализация однопоточного вычисления интеграла
//
class DefiniteIntegralOneThread
{
    //
    // a, b - границы отрезка, на котором происходит вычисление опредленного интеграла
    // function - функция, для которой вычисляется определнный интеграл
    // step - размер одного шага разбиения
    // threadsNumber - число потоков, которые используются для вычислений
    //
    public static double Solve(double a, double b, Func<double, double> function, double step)
    {
        double result = 0.0;
        result += (function.Invoke(a) + function.Invoke(b)) / 2;

        int steps = (int) Math.Round((b - a) / step);
        for (int i = 1; i < steps; i++) {
            result += function.Invoke(a + i * step);
        }   

        return result * step;
    }
}

#!csharp

#r "nuget:ScottPlot, 5.0.36"
using System.Diagnostics;
using Microsoft.DotNet.Interactive.Formatting;

Formatter.Register(typeof(ScottPlot.Plot), (p, w) => w.Write(((ScottPlot.Plot)p).GetImageHtml(400, 300)), HtmlFormatter.MimeType);

int maxThreadNumber = 100;
int callNumber = 500;

int[] millisecondsPerManyCalls = new int[maxThreadNumber];
int[] numberOfThreads = new int[maxThreadNumber];

for(int threadNumber = 0; threadNumber < maxThreadNumber; threadNumber++) {
    numberOfThreads[threadNumber] = threadNumber + 1;
    Console.Write(threadNumber);
    Stopwatch watch = new Stopwatch();
    for (int call = 0; call < callNumber; call++) {
        watch.Start();
        if (threadNumber == 0) {
            DefiniteIntegralOneThread.Solve(-100, 100, SIN, 1e-4);
        }
        else {
            DefiniteIntegral.Solve(-100, 100, SIN, 1e-4, threadNumber + 1);
        }
        watch.Stop();
        
    }
    millisecondsPerManyCalls[threadNumber] = (int) watch.ElapsedMilliseconds;
}

ScottPlot.Plot plt = new();
plt.Add.Scatter(millisecondsPerManyCalls.Select(e => e / callNumber).ToArray(), numberOfThreads);

int best = millisecondsPerManyCalls.Min();
Console.WriteLine(best);
int bestThreadCount = 0;
Console.WriteLine(String.Join(" ", millisecondsPerManyCalls.Select((e, i) => $"{i}пот - {e}")));
for (int i = 1; i < maxThreadNumber; i++){
    if (millisecondsPerManyCalls[i] == best) { 
        bestThreadCount = i;
        break;
    }   
}
    
Console.WriteLine($"1 поток - {millisecondsPerManyCalls[0] / callNumber} - 100%");
Console.WriteLine($"{bestThreadCount + 1} потоков - {millisecondsPerManyCalls[bestThreadCount] / callNumber} - {Math.Round(((double)millisecondsPerManyCalls[bestThreadCount]) / ((double)millisecondsPerManyCalls[0]) * 100, 2)}%");
Console.WriteLine("Шаг деления для интеграла - 1e-4");

plt

#!markdown

Оптимальное количество потоков - от раза к разу - около 20-30
Прирост скорости - 3-4 раза (26-38% времени от однопоточного)
